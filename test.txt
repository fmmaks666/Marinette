//
// Generated with src_make_integrated.py




// 
// Open Cleaner - System cleaning utility
// Object is a shell, computer or file
// Starting from file the functionality gets a downgrade
openCleaner = function(object=null, Theme=null, Messages=null, input=null)
    // 
    // Default theme
    if not Theme then Theme = {
        "prefix": "yellow",
        "log": "white",
        "warning": "orange",
        "error": "red",
        "inputMessage": "yellow",
        "input": "white",
        "miscPrimary": "yellow",
        "miscSecondary": "white",
    }


    // 
    // Default locale
    if not Messages then
        Messages = {}

        Messages.tpLogWelcomeMessage                        = "Welcome to {PROGRAM}"
        Messages.tpLogThanksAndQuit                         = "Thank you for using me. Quiting"
        Messages.tpErrorCommandNotFound                     = "There is no such command! Type <i>help</i> to see what is available"
        Messages.tpErrorIncorrectAmountOfArguments          = "Incorrect amount of arguments passed in! Needed amount: {AMOUNT}"
        Messages.tpErrorAmountOfArgumentsTooFew             = "Incorrect amount of arguments passed in! Needed amount: more than {AMOUNT}"
        Messages.tpErrorAmountOfArgumentsTooMuch            = "Incorrect amount of arguments passed in! Needed amount: less than {AMOUNT}"
        Messages.tpErrorNoHelpEntries                       = "Could not find any help entries!"
        Messages.tpErrorStringGeneral                       = "Error in call of <i>{FUNC}()</i>: {ERROR}"

        Messages.tpHelpEntryHelp                            = "[cmd] - Available commands list"
        Messages.tpHelpEntryClear                           = "Empty console window"
        Messages.tpHelpEntryQuit                            = "Quit {PROGRAM}"


        // 
        // Open Cleaner locale
        Messages.ocWipeContent                              = "Wiped with Open Cleaner"
        Messages.ocLogSuccessfullFileDeletion               = "Successfully deleted <i>{PATH}</i>"
        Messages.ocErrorFailedFileWipe                      = "Could not wipe <i>{PATH}</i>!"
        Messages.ocLogSuccessfullFileWipe                   = "Successfully wiped <i>{PATH}</i>"
        Messages.ocLogNoTextFilesIn                         = "No text files in <i>{PATH}</i>"
        Messages.ocLogNoFilesIn                             = "No files in <i>{PATH}</i>"
        Messages.ocWarningCouldNotFindPath                  = "Could not find <i>{PATH}</i>!"
        Messages.ocWarningPathNotDirectory                  = "Path <i>{PATH}</i> is not a directory!"
        Messages.ocLogPathAlreadyWiped                      = "Path <i>{PATH}</i> is already wiped"
        Messages.ocLogWipingPath                            = "Wiping <i>{PATH}</i>..."
        Messages.ocWarningPathNotTextFile                   = "Path <i>{PATH}</i> is not a text file!"
        Messages.ocLogWipingAllUsersPath                    = "Wiping all users' <i>{PATH}</i>..."
        Messages.ocWarningCouldNotFindAnyPath               = "Could not find any <i>{PATH}</i>"
        Messages.ocErrorThisCommandRequiresComputer         = "Command <i>{COMMAND}</i> requires at least a computer to work!"
        Messages.ocLogThanksAndQuit                         = "Thank you for using me. Quiting"
        Messages.ocErrorCouldNotCreateTempLog               = "Could not create temporary log file!"
        Messages.ocErrorTempLogDeleted                      = "Temporary log file has got deleted right after the creation!"

        Messages.ocHelpEntrySysbin                          = "Wipe /bin"
        Messages.ocHelpEntrySyslog                          = "Wipe /var/system.log"
        Messages.ocHelpEntrySyspassword                     = "Wipe /etc/passwd"
        Messages.ocHelpEntryUsertrash                       = "Wipe all users' ~/.Trash"
        Messages.ocHelpEntryUserconfig                      = "Wipe all users' ~/Config"
        Messages.ocHelpEntryUserdesktop                     = "Wipe all users' ~/Desktop"
        Messages.ocHelpEntryRecommended                     = "Apply syspasswd, usertrash, userconfig and syslog"
    end if
    

    // 
    // Constants
    Const = {
        "programName": "Open Cleaner",
        "prompt": "OCleaner > ",
    }


    // 
    // Variables
    Var = {
        "computer": null,
        "file": null,
    }


    // 
    // Routines
    tpTryRunOneCommand = function(command, arguments)
        if Commands.indexes.indexOf(command) == null then
            for kv in Aliases
                if kv.value.indexOf(command) != null then
                    command = kv.key
                    break
                end if
            end for

            if Commands.indexes.indexOf(command) == null then return Console.error(Messages.tpErrorCommandNotFound)
        end if

        routine = @Commands[command]
        routine(arguments)
    end function

    deleteFile = function(fd)
        yield
        result = fd.delete
        if result and result isa string then
            Console.error(replaceF(Messages.tpErrorStringGeneral, {"FUNC": "delete", "ERROR": result}))
        else
            Console.log(replaceF(Messages.ocLogSuccessfullFileDeletion, {"PATH": fd.path}))
        end if
    end function

    overwriteFile = function(fd)
        result = fd.set_content(Messages.ocWipeContent)
        if result isa string then
            Console.error(replaceF(Messages.tpErrorStringGeneral, {"FUNC": "set_content", "ERROR": result}))
        else if not result then
            Console.error(replaceF(Messages.ocErrorFailedFileWipe, {"PATH": fd.path}))
        else
            Console.log(replaceF(Messages.ocLogSuccessfullFileWipe, {"PATH": fd.path}))
        end if
    end function

    overwriteDirectory = function(fd)
        textfiles = []
        for textfd in fd.get_files
            if not textfd.is_folder and not textfd.is_binary then textfiles.push(textfd)
        end for
        if textfiles.len == 0 then return Console.log(replaceF(Messages.ocLogNoTextFilesIn, {"PATH": fd.path}))
        for textfd in textfiles
            overwriteFile(textfd)
        end for
    end function

    emptyDirectory = function(fd)
        contents = fd.get_folders+fd.get_files
        if contents.len == 0 then return Console.log(replaceF(Messages.ocLogNoFilesIn, {"PATH": fd.path}))
        for fd in contents
            deleteFile(fd)
        end for
    end function

    getUsersDirectories = function
        homes = []

        rootfd = iterateToPath(Var.file, "/root")
        if rootfd then homes.push(rootfd)

        homefd = iterateToPath(Var.file, "/home")
        if homefd then
            for dirfd in homefd.get_folders
                homes.push(dirfd)
            end for
        end if

        return homes
    end function


    // 
    // Basic console implementation
    Console = {}
    
    Console._printWithColorAndTime = function(color, message=" ")
        currentTime = current_date.split(" - ")[1]
        print("<color="+Theme.prefix+">-"+currentTime+"- <color="+color+">"+message)
    end function
    
    Console.log = function(message=" ")
        Console._printWithColorAndTime(Theme.log, message)
    end function
    
    Console.warning = function(message=" ")
        Console._printWithColorAndTime(Theme.warning, message)
    end function
    
    Console.error = function(message=" ")
        Console._printWithColorAndTime(Theme.error, message)
    end function
    
    Console.input = function(message=" ")
        input = user_input("<color="+Theme.inputMessage+">"+message+"<color="+Theme.input+">")
        if isInputValid(input) then return input
        return ""
    end function

    Console.cmdloop = function
        while true
            input = Console.input(Const.prompt).trim
            if input.len == 0 then continue
    
            parts = input.split(" ")
    
            command = parts.pull
            arguments = []
            for part in parts
                arguments.push(part.to_int)
            end for

            tpTryRunOneCommand(command, arguments)
    
            quits = Aliases["quit"] + ["quit"]
            if quits.indexOf(command) != null and arguments.len == 0 then return
        end while
    end function


    // 
    // Basic errors for commands
    Errors = {}

    Errors.arguments = function(count)
        Console.error(replaceF(Messages.tpErrorIncorrectAmountOfArguments, {"AMOUNT": count}))
    end function
    
    Errors.argumentsMoreThan = function(count)
        Console.error(replaceF(Messages.tpErrorAmountOfArgumentsTooFew, {"AMOUNT": count}))
    end function
    
    Errors.argumentsFewerThan = function(count)
        Console.error(replaceF(Messages.tpErrorAmountOfArgumentsTooMuch, {"AMOUNT": count}))
    end function


    // 
    // Defined commands
    Helps = {}
    Aliases = {}
    Commands = {}

    Helps["help"] = Messages.tpHelpEntryHelp
    Aliases["help"] = ["h", "?"]
    Commands["help"] = function(arguments)
        queries = {}
        for kv in Helps
            command = kv["key"]
            aliases = []
            description = kv["value"]

            if Aliases.indexes.indexOf(command) != null then aliases = Aliases[command]
            if aliases.len > 0 then command = command+", "+aliases.join(", ")
            
            if description.split(" - ").len == 1 then description = "N/A - "+description
            
            if arguments.len == 0 then
                print("<color="+Theme.miscPrimary+">"+command+" <color="+Theme.miscSecondary+">- "+description)
            else
                for queried in arguments
                    if command.indexOf(queried) != null then queries[queried] = ("<color="+Theme.miscPrimary+">"+command+" <color="+Theme.miscSecondary+">- "+description)
                end for
            end if
        end for
        if arguments.len > 0 then
            if queries.len == 0 then return Console.error(Messages.tpErrorNoHelpEntries)
            for queried in arguments
                if queries.indexes.indexOf(queried) != null then print(queries[queried])
            end for
        end if
    end function

    Helps["clear"] = Messages.tpHelpEntryClear
    Aliases["clear"] = ["cls"]
    Commands["clear"] = function(arguments)
        if arguments.len > 0 then return Errors.arguments(0)

        clear_screen
    end function

    Helps["quit"] = replaceF(Messages.tpHelpEntryQuit, {"PROGRAM": Const.programName})
    Aliases["quit"] = ["q"]
    Commands["quit"] = function(arguments)
        if arguments.len > 0 then return Errors.arguments(0)

        Console.log(Messages.tpLogThanksAndQuit)
    end function

    Helps["sysbin"] = Messages.ocHelpEntrySysbin
    Aliases["sysbin"] = ["sb"]
    Commands["sysbin"] = function(arguments)
        if arguments.len > 0 then return Errors.arguments(0)

        whitelist = ["cd", "reboot"]
        
        fd = iterateToPath(Var.file, "/bin")
        if not fd then return Console.warning(replaceF(Messages.ocWarningCouldNotFindPath, {"PATH": "/bin"}))
        if not fd.is_folder then return Console.warning(replaceF(Messages.ocWarningPathNotDirectory, {"PATH": "/bin"}))
        
        wipeBinaries = fd.get_folders
        for binary in fd.get_files
            name = binary.name
            if whitelist.indexOf(name) != null then continue
            if name[0] == name[0].upper then continue
            wipeBinaries.push(binary)
        end for

        if wipeBinaries.len == 0 then return Console.log(replaceF(Messages.ocLogPathAlreadyWiped, {"PATH": "/bin"}))
        Console.log(replaceF(Messages.ocLogWipingPath, {"PATH": "/bin"}))
        for binary in wipeBinaries
            deleteFile(binary)
        end for
    end function

    Helps["syslog"] = Messages.ocHelpEntrySyslog
    Aliases["syslog"] = ["sl"]
    Commands["syslog"] = function(arguments)
        if arguments.len > 0 then return Errors.arguments(0)
        if not Var.computer then return Console.error(replaceF(Messages.ocErrorThisCommandRequiresComputer, {"COMMAND": "syslog"}))

        Console.log(replaceF(Messages.ocLogWipingPath, {"PATH": "/var/system.log"}))
        
        tempname = ".system.log"
        result = Var.computer.touch("/var", tempname)
        if result isa string then
            return Console.error(replaceF(Messages.tpErrorStringGeneral, {"FUNC": "touch", "ERROR": result}))
        else if not result then
            return Console.error(Messages.ocErrorCouldNotCreateTempLog)
        end if

        tempfd = iterateToPath(Var.file, "/var/"+tempname)
        // 
        // This check is a counter of proactive protections
        if not tempfd then return Console.error(Messages.ocErrorTempLogDeleted)

        tempfd.set_content(Messages.ocWipeContent)

        result = tempfd.move("/var", "system.log")
        if result isa string then
            Console.error(replaceF(Messages.tpErrorStringGeneral, {"FUNC": "move", "ERROR": result}))
        else if not result then
            Console.error(replaceF(Messages.ocErrorFailedFileWipe, {"PATH": "/var/system.log"}))
        else
            Console.log(replaceF(Messages.ocLogSuccessfullFileWipe, {"PATH": "/var/system.log"}))
        end if
    end function

    Helps["syspasswd"] = Messages.ocHelpEntrySyspassword
    Aliases["syspasswd"] = ["sp"]
    Commands["syspasswd"] = function(arguments)
        if arguments.len > 0 then return Errors.arguments(0)

        fd = iterateToPath(Var.file, "/etc/passwd")
        if not fd then return Console.warning(replaceF(Messages.ocWarningCouldNotFindPath, {"PATH": "/etc/passwd"}))
        if fd.is_binary or fd.is_folder then return Console.warning(Messages.ocWarningPathNotTextFile, {"PATH": "/etc/passwd"})

        Console.log(replaceF(Messages.ocLogWipingPath, {"PATH": "/etc/passwd"}))
        overwriteFile(fd)
    end function

    Helps["usertrash"] = Messages.ocHelpEntryUsertrash
    Aliases["usertrash"] = ["ut"]
    Commands["usertrash"] = function(arguments)
        if arguments.len > 0 then return Errors.arguments(0)

        trashes = []

        for homefd in getUsersDirectories
            trashfd = iterateToPath(homefd, homefd.path+"/.Trash")
            if trashfd then trashes.push(trashfd)
        end for

        if trashes.len == 0 then return Console.warning(replaceF(Messages.ocWarningCouldNotFindAnyPath, {"PATH": "~/.Trash"}))
        Console.log(replaceF(Messages.ocLogWipingAllUsersPath, {"PATH": "~/.Trash"}))
        for trashfd in trashes
            emptyDirectory(trashfd)
        end for
    end function

    Helps["userconfig"] = Messages.ocHelpEntryUserconfig
    Aliases["userconfig"] = ["uc"]
    Commands["userconfig"] = function(arguments)
        if arguments.len > 0 then return Errors.arguments(0)

        configs = []

        for homefd in getUsersDirectories
            configfd = iterateToPath(homefd, homefd.path+"/Config")
            if configfd then configs.push(configfd)
        end for

        if configs.len == 0 then return Console.warning(replaceF(Messages.ocWarningCouldNotFindAnyPath, {"PATH": "~/Config"}))
        Console.log(replaceF(Messages.ocLogWipingAllUsersPath, {"PATH": "~/Config"}))
        for configfd in configs
            overwriteDirectory(configfd)
        end for
    end function

    Helps["userdesktop"] = Messages.ocHelpEntryUserdesktop
    Aliases["userdesktop"] = ["ud"]
    Commands["userdesktop"] = function(arguments)
        if arguments.len > 0 then return Errors.arguments(0)

        desktops = []

        for homefd in getUsersDirectories
            desktopfd = iterateToPath(homefd, homefd.path+"/Desktop")
            if desktopfd and desktopfd.is_folder then desktops.push(desktopfd)
        end for

        if desktops.len == 0 then return Console.warning(replaceF(Messages.ocWarningCouldNotFindAnyPath, {"PATH": "~/Desktop"}))
        Console.log(replaceF(Messages.ocLogWipingAllUsersPath, {"PATH": "~/Desktop"}))
        for desktopfd in desktops
            emptyDirectory(desktopfd)
        end for
    end function

    Helps["recommended"] = Messages.ocHelpEntryRecommended
    Aliases["recommended"] = ["rec"]
    Commands["recommended"] = function(arguments)
        if arguments.len > 0 then return Errors.arguments(0)

        Commands["syspasswd"]([])
        print(" ")
        Commands["usertrash"]([])
        print(" ")
        Commands["userconfig"]([])
        print(" ")
        Commands["syslog"]([])
    end function


    // 
    // Main logic
    main = function
        if not object then object = get_shell
        type = typeof(object).lower
        if type == "shell" then
            Var.computer = object.host_computer
            Var.file = Var.computer.File("/")
        else if type == "computer" then
            Var.computer = object
            Var.file = Var.computer.File("/")
        else if type == "file" then
            Var.file = iterateToPath(object, "/")
        end if

        if not input then
            Console.log(replaceF(Messages.tpLogWelcomeMessage, {"PROGRAM": Const.programName}))
            Console.cmdloop
        else
            if input.len == 0 then return

            parts = input.split(" ")

            command = parts.pull
            arguments = []
            for part in parts
                arguments.push(part.to_int)
            end for

            tpTryRunOneCommand(command, arguments)
        end if
    end function; main
end function

