plugins = get_custom_object

// TODO: Translations

permissions = [
	"Console",       // access to Marinette Console (pretty printing)
	"Libs",           // access to Libs
	"Commands",       // registering commands and aliases, access to Conditions
	"Var",           // access to Vars (Dangerous)
	"Sessions",       // access to sessions
	"CommandsDirect", // direct access to Commands && Aliases
	"Config",         // accesss to Config (Dangerous)
	"Language",       // access to Language ( && language name :D )
	"Theme",          // access to theme name and data
	"State",          // access to states
	"Root",           // access to many things (Extremely dangerous!)
]
plugins.basicPermissions = ["Console", "Commands", "Language", "Theme", "State"]

verifyMeta = function(meta)
	if typeof(@meta) != "map" then return false
	if not meta.hasIndex("internal") then return false
	if not meta.hasIndex("name") then return false
	if not meta.hasIndex("author") then return false
	if not meta.hasIndex("permissions") then return false
	
	if not meta["internal"] then return false
	if not meta["name"] then return false
	if not meta["author"] then return false
	// if meta["permissions"].len < 0 or meta["permission"].len > permissions.len then return false
	for permission in meta["permissions"]
		if permissions.indexOf(permission) == null then return false
	end for
	
	meta["internal"] = meta["internal"].replace(" ", "")
	
	return true
end function

getStructs = function(permission)
	if permission == "Commands" then
		return {"Commands": {}, "Help": {}, "Aliases": {}, "command": @command}
	else if permission == "Libs" then
		return Libs
	else if permission == "Console" then
		return Console
	else
		return null
	end if
end function


generateAPI = function(permissions)
	api = {}
	for permission in permissions
		if ["Commands"].indexOf(permission) != null then
			structs = getStructs(permission)
			api = api + structs
			continue
		end if
		api[permission] = getStructs(permission)
	end for
	return api
end function

setupCommands = function(plugin)
	for commandDef in plugin.Def.Commands
		if not str(@commandDef.value).matches("FUNCTION\(\w+\)") then
			Console.error(commandDef.key + ": Command is unsupported") // TODO: Translate
			continue
		end if
		if commandDef.key.indexOf(" ") != null then return Console.error("Command name must not contain spaces")
		if plugin.Def.Help.hasIndex(commandDef.key) then 
			help = plugin.Def.Help[commandDef.key] 
		else 
			help = "Undocument command"
		end if
		if plugin.Def.Aliases.hasIndex(commandDef.key) then 
			aliases = plugin.Def.Aliases[commandDef.key] 
		else 
			aliases = []
		end if
		command commandDef.key, aliases, Const.plugin, help, @commandDef.value
	end for
end function

setupPlugin = function(plugin)
	if plugin.Meta.permissions.indexOf("Commands") != null then
		setupCommands(plugin)
	end if
end function

loadPlugin = function(shell, path)
	Var.importPlugin = true
	shell.launch(path)
	// What if launch failed?
	toSetup = Var.loadedPlugins[Var.loadedPlugins.indexes[-1]]
	setupPlugin(toSetup)
	Var.importPlugin = false
end function

plugins.registerPlugin = function(meta, secret)
	if not Var.importPlugin then return exit(Console.error("Use pluger to import plugin"))
	if not secret or typeof(secret) != "string" then return Console.error("Invalid token")
	if not verifyMeta(meta) then return Console.error("Plugin has invalid definition")
	api = generateAPI(meta.permissions)
	Var.loadedPlugins[meta.internal] = {"Meta": meta, "Def": api, "secret": secret}
	return api
end function

plugins.createMeta = function(internal, name, author, permissions=null)
	if not permissions then permissions = plugins.basicPermissions
	return {"internal": internal, "name": name, "author": author, "permissions": permissions}
end function

get_shell.launch("/root/plugin")
loadPlugin(get_shell, "/root/plugin")
get_shell.launch("/root/plugin")
